Discovering pathways with the Spider pattern

In this post I'm going to show a pattern that you can use to discover facts about your actor system while it is running and build up a picture
of the messages that are passed between actors.
The main reason why I built this pattern is to understand what is going on in a running actor system that is distributed across many machines.
If I can't picture it, I can't understand it (and I'm in good company with that quote :)

Building actor systems is fun but debugging them can be difficult, you mostly end up browsing through many log files on several machines to find out what's going on.
I'm sure you have browsed through logs and thought, "hey, where did that message go?", "why did this message cause that effect" or "why did this actor never get a message?"

The below figure shows a (hypothetical) actor system that processes images from camera's and tries to recognize vehicles and people on the image, and
how the image can flow through the system.

[insert image]

When debugging this system, you will want to know which actors worked correctly, and how long they took. While the system is in production it is also good to know
that everything still runs according to performance requirements.

In many cases some kind of event like the above starts a flow through your actors.
Some external event creates a message and sends it through actor systems across several machines
in some shape or form.
The actors in the system do something based on this message. The actors receive messages that are related to the event,
do some processing, send messages to each others about the event and create new messages as part of the flow.

The easiest way to get an understanding of how the messages flow through the total system is to give every event a unique ID, and put that ID in every message.
Simple tracing of message flows. Whenever an actor receives a message, it logs the ID, time, name of the actor and some contextual information
to a file with the ActorLogging trait. Based on the information in the log files you can recreate a picture of how messages flow through the system,
how long every actor took and so on.
That gives you some information, but it is still quite hard to trace a flow of messages in log files across many machines. There is always
the option of scraping the log files, but you don't want to download all the logs just to get the information about a couple of messages.
And you can only get the information that the actor itself logged.

What you would really want is some way to ask the system where messages went and maybe even way.
Ask it to give you a picture of the active flows in the system, which
 actors where involved, which servers where used and how long everything took.
The below figure is an example of a picture you would like to be able to build and get information about.

[insert flow]

Ideally you should be able to take some kind of action as well based on the information you get back.
In the above example, maybe you want to restart actor C because it's very slow and switch sending to another server.
Let's see what we can do to build a pattern that provides a bases for this type of functionality.

Requirements
------------
The requirements for this pattern are the following:
- I have an ID of a message flow, and now I want to know which Actors were involved. I know at least one ActorPath to an actor in the system
that was part of the flow. the pattern must provide enough information to build up a picture of how the actors are connected and
how the messages flow through them.
- I want to be able to run some kind of diagnostics on all the Actors that took part in the flow and collect results.
Information like the time an actor takes to process the message.
- I'm sure I'll have other requirements once I've got that down, so a generic solution would be great. It should be possible to build
other use cases on top of the pattern. Generically, I want to discover meaningful pathways in my actorsystems.

Train of thought
----------------
How are we going to discover the dynamic networks that are formed between actors?
There could be all kinds of routers, balancers, broadcasters between the actors that forward messages.
Well, actors have four core operations:

1. Create
2. Send
3. Become
4. Supervise

An actor system is basically a network of nodes with these operations. Every node processes messages sequentially.
If you look at an actor system in terms of cause and effect, the cause is a message that is sent to a message, the effect is that the actor sends out messages to other
actors. From the perspective of discovering messaging networks, only creating and sending is relevant. (the other two might be interesting for a later post)

[insert cause]

If we want to discover how messages are sent in the network of actors, we need to know a couple of things:

1. From which actors is an actor receiving messages.
2. To which actors is an actor sending messages.
3. Which actors where created by an actor, since it might send messages to these later.
We need to attach to every Actor in the system and find out these three facts.
Once we know the causing actor and effected actors of every actor we can build up
a network across which the messages must have travelled.
We can (temporarily) keep diagnostic information at every node in the network, which we can retrieve later.

Pattern overview
----------------
The pattern uses the concept of spiders on a web. Webnodes are attached to every actor, and intercept incoming
and outgoing messages.
The web is built by the actors communicating with each other, since the webnodes are eavesdropping.
The webnodes keep track of who communicated with who, and builds up a web.
Whenever a message is sent, received, or an actor created, the web is expanded.

[insert spider pattern1,2]

The webnodes stick themselves onto the actors, and can handle requests that the actors don't know anything about, like for
instance a request for diagnostic information. when a webnode gets a request, it collects the diagnostic data that it built up while
the actors where sending messages, and forwards the diagnostic request to all paths in and out of the actor,
reaching every webnode attached to every actor.
These webnodes in turn collect their data and broadcast the message, until all webnodes are reached.

Lets look at the code for this pattern. Because there is no way to automatically swap out ActorRefs on the actors in the network,
We will need to take some considerations when building the actors. (the ActorRef class has a private self type, so you
can't really extend it outside of Akka, and the ActorContext has some protected methods you cannot delegate for outside of Akka)
We can't use the Actors methods directly, because otherwise the webnodes will never be able to intercept the messages going out.

So the first thing to build is a little trait that sort of isolates the actor from the direct API and provides methods for sending
messages to actors and creating actors.


Actor References to the rescue
------------------------------
One of the things I love about Akka is ActorRefs. It is a beautiful uniform abstraction.
You can be sure to always reach the same Actor when you send a message to an ActorRef. (The Actor instance might be replaced by
 a restart but you get the point). It provides an identity that you can keep referring to. It might be on the same machine, it might be somewhere remote.





